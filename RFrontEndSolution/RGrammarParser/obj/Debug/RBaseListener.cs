//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\ф Back Up\свокг 2011 - 2017\птувиайг\RFrontEndSolution\RGrammarParser\R.g4 by ANTLR 4.5.3-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RGrammarParser {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IRListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class RBaseListener : IRListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>exprHelpForMethods</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprHelpForMethods([NotNull] RParser.ExprHelpForMethodsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprHelpForMethods</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprHelpForMethods([NotNull] RParser.ExprHelpForMethodsContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprTildeBinary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprTildeBinary([NotNull] RParser.ExprTildeBinaryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprTildeBinary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprTildeBinary([NotNull] RParser.ExprTildeBinaryContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprSTRING</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprSTRING([NotNull] RParser.ExprSTRINGContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprSTRING</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprSTRING([NotNull] RParser.ExprSTRINGContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprTRUE</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprTRUE([NotNull] RParser.ExprTRUEContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprTRUE</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprTRUE([NotNull] RParser.ExprTRUEContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprNotUnary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprNotUnary([NotNull] RParser.ExprNotUnaryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprNotUnary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprNotUnary([NotNull] RParser.ExprNotUnaryContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprNAComplex</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprNAComplex([NotNull] RParser.ExprNAComplexContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprNAComplex</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprNAComplex([NotNull] RParser.ExprNAComplexContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprFALSE</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprFALSE([NotNull] RParser.ExprFALSEContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprFALSE</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprFALSE([NotNull] RParser.ExprFALSEContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprAndBinary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprAndBinary([NotNull] RParser.ExprAndBinaryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprAndBinary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprAndBinary([NotNull] RParser.ExprAndBinaryContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprHEX</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprHEX([NotNull] RParser.ExprHEXContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprHEX</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprHEX([NotNull] RParser.ExprHEXContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprParenthesis</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprParenthesis([NotNull] RParser.ExprParenthesisContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprParenthesis</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprParenthesis([NotNull] RParser.ExprParenthesisContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprIndexingByVectors</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprIndexingByVectors([NotNull] RParser.ExprIndexingByVectorsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprIndexingByVectors</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprIndexingByVectors([NotNull] RParser.ExprIndexingByVectorsContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprMultiplicationOrDivisionBinary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprMultiplicationOrDivisionBinary([NotNull] RParser.ExprMultiplicationOrDivisionBinaryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprMultiplicationOrDivisionBinary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprMultiplicationOrDivisionBinary([NotNull] RParser.ExprMultiplicationOrDivisionBinaryContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprFor</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprFor([NotNull] RParser.ExprForContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprFor</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprFor([NotNull] RParser.ExprForContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprNAInteger</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprNAInteger([NotNull] RParser.ExprNAIntegerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprNAInteger</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprNAInteger([NotNull] RParser.ExprNAIntegerContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprCompound</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprCompound([NotNull] RParser.ExprCompoundContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprCompound</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprCompound([NotNull] RParser.ExprCompoundContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprNextStatement</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprNextStatement([NotNull] RParser.ExprNextStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprNextStatement</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprNextStatement([NotNull] RParser.ExprNextStatementContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprNaN</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprNaN([NotNull] RParser.ExprNaNContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprNaN</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprNaN([NotNull] RParser.ExprNaNContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprSingleDoubleColonsOperators</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprSingleDoubleColonsOperators([NotNull] RParser.ExprSingleDoubleColonsOperatorsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprSingleDoubleColonsOperators</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprSingleDoubleColonsOperators([NotNull] RParser.ExprSingleDoubleColonsOperatorsContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprCallFunction</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprCallFunction([NotNull] RParser.ExprCallFunctionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprCallFunction</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprCallFunction([NotNull] RParser.ExprCallFunctionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprWhile</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprWhile([NotNull] RParser.ExprWhileContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprWhile</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprWhile([NotNull] RParser.ExprWhileContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprOrBinary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprOrBinary([NotNull] RParser.ExprOrBinaryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprOrBinary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprOrBinary([NotNull] RParser.ExprOrBinaryContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprTildeUnary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprTildeUnary([NotNull] RParser.ExprTildeUnaryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprTildeUnary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprTildeUnary([NotNull] RParser.ExprTildeUnaryContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprMinusOrPlusBinary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprMinusOrPlusBinary([NotNull] RParser.ExprMinusOrPlusBinaryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprMinusOrPlusBinary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprMinusOrPlusBinary([NotNull] RParser.ExprMinusOrPlusBinaryContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprIfElseStatement</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprIfElseStatement([NotNull] RParser.ExprIfElseStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprIfElseStatement</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprIfElseStatement([NotNull] RParser.ExprIfElseStatementContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprIfStatement</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprIfStatement([NotNull] RParser.ExprIfStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprIfStatement</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprIfStatement([NotNull] RParser.ExprIfStatementContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprInf</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprInf([NotNull] RParser.ExprInfContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprInf</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprInf([NotNull] RParser.ExprInfContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprComparisons</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprComparisons([NotNull] RParser.ExprComparisonsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprComparisons</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprComparisons([NotNull] RParser.ExprComparisonsContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprIndexingBasic</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprIndexingBasic([NotNull] RParser.ExprIndexingBasicContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprIndexingBasic</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprIndexingBasic([NotNull] RParser.ExprIndexingBasicContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprBreakStatement</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprBreakStatement([NotNull] RParser.ExprBreakStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprBreakStatement</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprBreakStatement([NotNull] RParser.ExprBreakStatementContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprNA</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprNA([NotNull] RParser.ExprNAContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprNA</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprNA([NotNull] RParser.ExprNAContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprNULL</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprNULL([NotNull] RParser.ExprNULLContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprNULL</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprNULL([NotNull] RParser.ExprNULLContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprNACharacter</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprNACharacter([NotNull] RParser.ExprNACharacterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprNACharacter</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprNACharacter([NotNull] RParser.ExprNACharacterContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprMinusOrPlusUnary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprMinusOrPlusUnary([NotNull] RParser.ExprMinusOrPlusUnaryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprMinusOrPlusUnary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprMinusOrPlusUnary([NotNull] RParser.ExprMinusOrPlusUnaryContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprNAReal</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprNAReal([NotNull] RParser.ExprNARealContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprNAReal</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprNAReal([NotNull] RParser.ExprNARealContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprID</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprID([NotNull] RParser.ExprIDContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprID</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprID([NotNull] RParser.ExprIDContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprFLOAT</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprFLOAT([NotNull] RParser.ExprFLOATContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprFLOAT</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprFLOAT([NotNull] RParser.ExprFLOATContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprDollarAtOperators</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprDollarAtOperators([NotNull] RParser.ExprDollarAtOperatorsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprDollarAtOperators</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprDollarAtOperators([NotNull] RParser.ExprDollarAtOperatorsContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprCOMPLEX</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprCOMPLEX([NotNull] RParser.ExprCOMPLEXContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprCOMPLEX</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprCOMPLEX([NotNull] RParser.ExprCOMPLEXContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprHelp</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprHelp([NotNull] RParser.ExprHelpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprHelp</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprHelp([NotNull] RParser.ExprHelpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprRepeat</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprRepeat([NotNull] RParser.ExprRepeatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprRepeat</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprRepeat([NotNull] RParser.ExprRepeatContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprColonOperator</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprColonOperator([NotNull] RParser.ExprColonOperatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprColonOperator</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprColonOperator([NotNull] RParser.ExprColonOperatorContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprAssignmentOpetators</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprAssignmentOpetators([NotNull] RParser.ExprAssignmentOpetatorsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprAssignmentOpetators</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprAssignmentOpetators([NotNull] RParser.ExprAssignmentOpetatorsContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprINT</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprINT([NotNull] RParser.ExprINTContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprINT</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprINT([NotNull] RParser.ExprINTContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprWrappedWithPercent</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprWrappedWithPercent([NotNull] RParser.ExprWrappedWithPercentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprWrappedWithPercent</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprWrappedWithPercent([NotNull] RParser.ExprWrappedWithPercentContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprExponentiationBinary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprExponentiationBinary([NotNull] RParser.ExprExponentiationBinaryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprExponentiationBinary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprExponentiationBinary([NotNull] RParser.ExprExponentiationBinaryContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>exprDefineFunction</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprDefineFunction([NotNull] RParser.ExprDefineFunctionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprDefineFunction</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprDefineFunction([NotNull] RParser.ExprDefineFunctionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.prog"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProg([NotNull] RParser.ProgContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.prog"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProg([NotNull] RParser.ProgContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpr([NotNull] RParser.ExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpr([NotNull] RParser.ExprContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.exprlist"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprlist([NotNull] RParser.ExprlistContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.exprlist"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprlist([NotNull] RParser.ExprlistContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.formlist"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFormlist([NotNull] RParser.FormlistContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.formlist"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFormlist([NotNull] RParser.FormlistContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.form"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForm([NotNull] RParser.FormContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.form"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForm([NotNull] RParser.FormContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.sublist"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSublist([NotNull] RParser.SublistContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.sublist"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSublist([NotNull] RParser.SublistContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.sub"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSub([NotNull] RParser.SubContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.sub"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSub([NotNull] RParser.SubContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace RGrammarParser
