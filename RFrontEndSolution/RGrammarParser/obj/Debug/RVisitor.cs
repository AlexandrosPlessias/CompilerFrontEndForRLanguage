//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\ф Back Up\свокг 2011 - 2017\птувиайг\RFrontEndSolution\RGrammarParser\R.g4 by ANTLR 4.5.3-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RGrammarParser {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="RParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3-SNAPSHOT")]
[System.CLSCompliant(false)]
public interface IRVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by the <c>exprHelpForMethods</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprHelpForMethods([NotNull] RParser.ExprHelpForMethodsContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprTildeBinary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprTildeBinary([NotNull] RParser.ExprTildeBinaryContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprSTRING</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprSTRING([NotNull] RParser.ExprSTRINGContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprTRUE</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprTRUE([NotNull] RParser.ExprTRUEContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprNotUnary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprNotUnary([NotNull] RParser.ExprNotUnaryContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprNAComplex</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprNAComplex([NotNull] RParser.ExprNAComplexContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprFALSE</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprFALSE([NotNull] RParser.ExprFALSEContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprAndBinary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprAndBinary([NotNull] RParser.ExprAndBinaryContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprHEX</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprHEX([NotNull] RParser.ExprHEXContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprParenthesis</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprParenthesis([NotNull] RParser.ExprParenthesisContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprIndexingByVectors</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprIndexingByVectors([NotNull] RParser.ExprIndexingByVectorsContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprMultiplicationOrDivisionBinary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprMultiplicationOrDivisionBinary([NotNull] RParser.ExprMultiplicationOrDivisionBinaryContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprFor</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprFor([NotNull] RParser.ExprForContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprNAInteger</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprNAInteger([NotNull] RParser.ExprNAIntegerContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprCompound</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprCompound([NotNull] RParser.ExprCompoundContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprNextStatement</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprNextStatement([NotNull] RParser.ExprNextStatementContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprNaN</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprNaN([NotNull] RParser.ExprNaNContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprSingleDoubleColonsOperators</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprSingleDoubleColonsOperators([NotNull] RParser.ExprSingleDoubleColonsOperatorsContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprCallFunction</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprCallFunction([NotNull] RParser.ExprCallFunctionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprWhile</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprWhile([NotNull] RParser.ExprWhileContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprOrBinary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprOrBinary([NotNull] RParser.ExprOrBinaryContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprTildeUnary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprTildeUnary([NotNull] RParser.ExprTildeUnaryContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprMinusOrPlusBinary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprMinusOrPlusBinary([NotNull] RParser.ExprMinusOrPlusBinaryContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprIfElseStatement</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprIfElseStatement([NotNull] RParser.ExprIfElseStatementContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprIfStatement</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprIfStatement([NotNull] RParser.ExprIfStatementContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprInf</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprInf([NotNull] RParser.ExprInfContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprComparisons</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprComparisons([NotNull] RParser.ExprComparisonsContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprIndexingBasic</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprIndexingBasic([NotNull] RParser.ExprIndexingBasicContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprBreakStatement</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprBreakStatement([NotNull] RParser.ExprBreakStatementContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprNA</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprNA([NotNull] RParser.ExprNAContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprNULL</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprNULL([NotNull] RParser.ExprNULLContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprNACharacter</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprNACharacter([NotNull] RParser.ExprNACharacterContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprMinusOrPlusUnary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprMinusOrPlusUnary([NotNull] RParser.ExprMinusOrPlusUnaryContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprNAReal</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprNAReal([NotNull] RParser.ExprNARealContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprID</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprID([NotNull] RParser.ExprIDContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprFLOAT</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprFLOAT([NotNull] RParser.ExprFLOATContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprDollarAtOperators</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprDollarAtOperators([NotNull] RParser.ExprDollarAtOperatorsContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprCOMPLEX</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprCOMPLEX([NotNull] RParser.ExprCOMPLEXContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprHelp</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprHelp([NotNull] RParser.ExprHelpContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprRepeat</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprRepeat([NotNull] RParser.ExprRepeatContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprColonOperator</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprColonOperator([NotNull] RParser.ExprColonOperatorContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprAssignmentOpetators</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprAssignmentOpetators([NotNull] RParser.ExprAssignmentOpetatorsContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprINT</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprINT([NotNull] RParser.ExprINTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprWrappedWithPercent</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprWrappedWithPercent([NotNull] RParser.ExprWrappedWithPercentContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprExponentiationBinary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprExponentiationBinary([NotNull] RParser.ExprExponentiationBinaryContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>exprDefineFunction</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprDefineFunction([NotNull] RParser.ExprDefineFunctionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="RParser.prog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProg([NotNull] RParser.ProgContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr([NotNull] RParser.ExprContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="RParser.exprlist"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprlist([NotNull] RParser.ExprlistContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="RParser.formlist"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFormlist([NotNull] RParser.FormlistContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="RParser.form"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForm([NotNull] RParser.FormContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="RParser.sublist"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSublist([NotNull] RParser.SublistContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="RParser.sub"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSub([NotNull] RParser.SubContext context);
}
} // namespace RGrammarParser
