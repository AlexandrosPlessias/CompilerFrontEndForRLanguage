//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\ф Back Up\свокг 2011 - 2017\птувиайг\RFrontEndSolution\RGrammarParser\R.g4 by ANTLR 4.5.3-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RGrammarParser {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="RParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3-SNAPSHOT")]
[System.CLSCompliant(false)]
public interface IRListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>exprHelpForMethods</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprHelpForMethods([NotNull] RParser.ExprHelpForMethodsContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprHelpForMethods</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprHelpForMethods([NotNull] RParser.ExprHelpForMethodsContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprTildeBinary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprTildeBinary([NotNull] RParser.ExprTildeBinaryContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprTildeBinary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprTildeBinary([NotNull] RParser.ExprTildeBinaryContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprSTRING</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprSTRING([NotNull] RParser.ExprSTRINGContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprSTRING</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprSTRING([NotNull] RParser.ExprSTRINGContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprTRUE</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprTRUE([NotNull] RParser.ExprTRUEContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprTRUE</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprTRUE([NotNull] RParser.ExprTRUEContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprNotUnary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprNotUnary([NotNull] RParser.ExprNotUnaryContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprNotUnary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprNotUnary([NotNull] RParser.ExprNotUnaryContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprNAComplex</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprNAComplex([NotNull] RParser.ExprNAComplexContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprNAComplex</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprNAComplex([NotNull] RParser.ExprNAComplexContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprFALSE</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprFALSE([NotNull] RParser.ExprFALSEContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprFALSE</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprFALSE([NotNull] RParser.ExprFALSEContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprAndBinary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprAndBinary([NotNull] RParser.ExprAndBinaryContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprAndBinary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprAndBinary([NotNull] RParser.ExprAndBinaryContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprHEX</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprHEX([NotNull] RParser.ExprHEXContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprHEX</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprHEX([NotNull] RParser.ExprHEXContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprParenthesis</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprParenthesis([NotNull] RParser.ExprParenthesisContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprParenthesis</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprParenthesis([NotNull] RParser.ExprParenthesisContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprIndexingByVectors</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprIndexingByVectors([NotNull] RParser.ExprIndexingByVectorsContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprIndexingByVectors</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprIndexingByVectors([NotNull] RParser.ExprIndexingByVectorsContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprMultiplicationOrDivisionBinary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprMultiplicationOrDivisionBinary([NotNull] RParser.ExprMultiplicationOrDivisionBinaryContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprMultiplicationOrDivisionBinary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprMultiplicationOrDivisionBinary([NotNull] RParser.ExprMultiplicationOrDivisionBinaryContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprFor</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprFor([NotNull] RParser.ExprForContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprFor</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprFor([NotNull] RParser.ExprForContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprNAInteger</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprNAInteger([NotNull] RParser.ExprNAIntegerContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprNAInteger</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprNAInteger([NotNull] RParser.ExprNAIntegerContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprCompound</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprCompound([NotNull] RParser.ExprCompoundContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprCompound</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprCompound([NotNull] RParser.ExprCompoundContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprNextStatement</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprNextStatement([NotNull] RParser.ExprNextStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprNextStatement</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprNextStatement([NotNull] RParser.ExprNextStatementContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprNaN</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprNaN([NotNull] RParser.ExprNaNContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprNaN</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprNaN([NotNull] RParser.ExprNaNContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprSingleDoubleColonsOperators</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprSingleDoubleColonsOperators([NotNull] RParser.ExprSingleDoubleColonsOperatorsContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprSingleDoubleColonsOperators</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprSingleDoubleColonsOperators([NotNull] RParser.ExprSingleDoubleColonsOperatorsContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprCallFunction</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprCallFunction([NotNull] RParser.ExprCallFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprCallFunction</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprCallFunction([NotNull] RParser.ExprCallFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprWhile</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprWhile([NotNull] RParser.ExprWhileContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprWhile</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprWhile([NotNull] RParser.ExprWhileContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprOrBinary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprOrBinary([NotNull] RParser.ExprOrBinaryContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprOrBinary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprOrBinary([NotNull] RParser.ExprOrBinaryContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprTildeUnary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprTildeUnary([NotNull] RParser.ExprTildeUnaryContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprTildeUnary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprTildeUnary([NotNull] RParser.ExprTildeUnaryContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprMinusOrPlusBinary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprMinusOrPlusBinary([NotNull] RParser.ExprMinusOrPlusBinaryContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprMinusOrPlusBinary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprMinusOrPlusBinary([NotNull] RParser.ExprMinusOrPlusBinaryContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprIfElseStatement</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprIfElseStatement([NotNull] RParser.ExprIfElseStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprIfElseStatement</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprIfElseStatement([NotNull] RParser.ExprIfElseStatementContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprIfStatement</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprIfStatement([NotNull] RParser.ExprIfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprIfStatement</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprIfStatement([NotNull] RParser.ExprIfStatementContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprInf</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprInf([NotNull] RParser.ExprInfContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprInf</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprInf([NotNull] RParser.ExprInfContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprComparisons</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprComparisons([NotNull] RParser.ExprComparisonsContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprComparisons</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprComparisons([NotNull] RParser.ExprComparisonsContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprIndexingBasic</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprIndexingBasic([NotNull] RParser.ExprIndexingBasicContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprIndexingBasic</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprIndexingBasic([NotNull] RParser.ExprIndexingBasicContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprBreakStatement</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprBreakStatement([NotNull] RParser.ExprBreakStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprBreakStatement</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprBreakStatement([NotNull] RParser.ExprBreakStatementContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprNA</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprNA([NotNull] RParser.ExprNAContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprNA</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprNA([NotNull] RParser.ExprNAContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprNULL</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprNULL([NotNull] RParser.ExprNULLContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprNULL</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprNULL([NotNull] RParser.ExprNULLContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprNACharacter</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprNACharacter([NotNull] RParser.ExprNACharacterContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprNACharacter</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprNACharacter([NotNull] RParser.ExprNACharacterContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprMinusOrPlusUnary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprMinusOrPlusUnary([NotNull] RParser.ExprMinusOrPlusUnaryContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprMinusOrPlusUnary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprMinusOrPlusUnary([NotNull] RParser.ExprMinusOrPlusUnaryContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprNAReal</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprNAReal([NotNull] RParser.ExprNARealContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprNAReal</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprNAReal([NotNull] RParser.ExprNARealContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprID</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprID([NotNull] RParser.ExprIDContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprID</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprID([NotNull] RParser.ExprIDContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprFLOAT</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprFLOAT([NotNull] RParser.ExprFLOATContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprFLOAT</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprFLOAT([NotNull] RParser.ExprFLOATContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprDollarAtOperators</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprDollarAtOperators([NotNull] RParser.ExprDollarAtOperatorsContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprDollarAtOperators</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprDollarAtOperators([NotNull] RParser.ExprDollarAtOperatorsContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprCOMPLEX</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprCOMPLEX([NotNull] RParser.ExprCOMPLEXContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprCOMPLEX</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprCOMPLEX([NotNull] RParser.ExprCOMPLEXContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprHelp</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprHelp([NotNull] RParser.ExprHelpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprHelp</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprHelp([NotNull] RParser.ExprHelpContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprRepeat</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprRepeat([NotNull] RParser.ExprRepeatContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprRepeat</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprRepeat([NotNull] RParser.ExprRepeatContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprColonOperator</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprColonOperator([NotNull] RParser.ExprColonOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprColonOperator</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprColonOperator([NotNull] RParser.ExprColonOperatorContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprAssignmentOpetators</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprAssignmentOpetators([NotNull] RParser.ExprAssignmentOpetatorsContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprAssignmentOpetators</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprAssignmentOpetators([NotNull] RParser.ExprAssignmentOpetatorsContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprINT</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprINT([NotNull] RParser.ExprINTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprINT</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprINT([NotNull] RParser.ExprINTContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprWrappedWithPercent</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprWrappedWithPercent([NotNull] RParser.ExprWrappedWithPercentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprWrappedWithPercent</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprWrappedWithPercent([NotNull] RParser.ExprWrappedWithPercentContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprExponentiationBinary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprExponentiationBinary([NotNull] RParser.ExprExponentiationBinaryContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprExponentiationBinary</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprExponentiationBinary([NotNull] RParser.ExprExponentiationBinaryContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>exprDefineFunction</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprDefineFunction([NotNull] RParser.ExprDefineFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprDefineFunction</c>
	/// labeled alternative in <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprDefineFunction([NotNull] RParser.ExprDefineFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.prog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProg([NotNull] RParser.ProgContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.prog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProg([NotNull] RParser.ProgContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr([NotNull] RParser.ExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr([NotNull] RParser.ExprContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.exprlist"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprlist([NotNull] RParser.ExprlistContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.exprlist"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprlist([NotNull] RParser.ExprlistContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.formlist"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFormlist([NotNull] RParser.FormlistContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.formlist"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFormlist([NotNull] RParser.FormlistContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.form"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForm([NotNull] RParser.FormContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.form"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForm([NotNull] RParser.FormContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.sublist"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSublist([NotNull] RParser.SublistContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.sublist"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSublist([NotNull] RParser.SublistContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.sub"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSub([NotNull] RParser.SubContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.sub"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSub([NotNull] RParser.SubContext context);
}
} // namespace RGrammarParser
