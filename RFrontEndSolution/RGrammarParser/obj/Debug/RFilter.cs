//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\ф Back Up\свокг 2011 - 2017\птувиайг\RFrontEndSolution\RGrammarParser\RFilter.g4 by ANTLR 4.5.3-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RGrammarParser {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class RFilter : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, HEX=58, INT=59, FLOAT=60, 
		COMPLEX=61, STRING=62, ID=63, USER_OP=64, COMMENT=65, NL=66, WS=67;
	public const int
		RULE_stream = 0, RULE_eat = 1, RULE_elem = 2, RULE_atom = 3, RULE_op = 4;
	public static readonly string[] ruleNames = {
		"stream", "eat", "elem", "atom", "op"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'[['", "']'", "'['", "'::'", "':::'", "'$'", "'@'", "'^'", 
		"'-'", "'+'", "':'", "'*'", "'/'", "'>'", "'>='", "'<'", "'<='", "'=='", 
		"'!='", "'!'", "'&'", "'&&'", "'|'", "'||'", "'~'", "'<-'", "'<<-'", "'='", 
		"'->'", "'->>'", "':='", "'function'", "'('", "')'", "'{'", "'}'", "'if'", 
		"'else'", "'for'", "'in'", "'while'", "'repeat'", "'?'", "'next'", "'break'", 
		"'NULL'", "'NA'", "'NA_integer_'", "'NA_real_'", "'NA_complex_'", "'NA_character_'", 
		"'Inf'", "'NaN'", "'TRUE'", "'FALSE'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "HEX", "INT", 
		"FLOAT", "COMPLEX", "STRING", "ID", "USER_OP", "COMMENT", "NL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RFilter.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public RFilter(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class StreamContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(RFilter.Eof, 0); }
		public ElemContext[] elem() {
			return GetRuleContexts<ElemContext>();
		}
		public ElemContext elem(int i) {
			return GetRuleContext<ElemContext>(i);
		}
		public ITerminalNode[] NL() { return GetTokens(RFilter.NL); }
		public ITerminalNode NL(int i) {
			return GetToken(RFilter.NL, i);
		}
		public StreamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stream; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRFilterListener typedListener = listener as IRFilterListener;
			if (typedListener != null) typedListener.EnterStream(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRFilterListener typedListener = listener as IRFilterListener;
			if (typedListener != null) typedListener.ExitStream(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRFilterVisitor<TResult> typedVisitor = visitor as IRFilterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStream(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StreamContext stream() {
		StreamContext _localctx = new StreamContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_stream);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 15;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__32) | (1L << T__33) | (1L << T__35) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << HEX) | (1L << INT) | (1L << FLOAT) | (1L << COMPLEX) | (1L << STRING) | (1L << ID))) != 0) || _la==USER_OP || _la==NL) {
				{
				State = 13;
				switch (_input.La(1)) {
				case T__1:
				case T__3:
				case T__4:
				case T__5:
				case T__6:
				case T__7:
				case T__8:
				case T__9:
				case T__10:
				case T__11:
				case T__12:
				case T__13:
				case T__14:
				case T__15:
				case T__16:
				case T__17:
				case T__18:
				case T__19:
				case T__20:
				case T__21:
				case T__22:
				case T__23:
				case T__24:
				case T__25:
				case T__26:
				case T__27:
				case T__28:
				case T__29:
				case T__30:
				case T__32:
				case T__33:
				case T__35:
				case T__37:
				case T__38:
				case T__39:
				case T__40:
				case T__41:
				case T__42:
				case T__43:
				case T__44:
				case T__45:
				case T__46:
				case T__47:
				case T__48:
				case T__49:
				case T__50:
				case T__51:
				case T__52:
				case T__53:
				case T__54:
				case T__55:
				case T__56:
				case HEX:
				case INT:
				case FLOAT:
				case COMPLEX:
				case STRING:
				case ID:
				case USER_OP:
					{
					State = 10; elem();
					}
					break;
				case NL:
					{
					State = 11; Match(NL);
					}
					break;
				case T__0:
					{
					State = 12; Match(T__0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 17;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 18; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EatContext : ParserRuleContext {
		public IToken _NL;
		public ITerminalNode[] NL() { return GetTokens(RFilter.NL); }
		public ITerminalNode NL(int i) {
			return GetToken(RFilter.NL, i);
		}
		public EatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRFilterListener typedListener = listener as IRFilterListener;
			if (typedListener != null) typedListener.EnterEat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRFilterListener typedListener = listener as IRFilterListener;
			if (typedListener != null) typedListener.ExitEat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRFilterVisitor<TResult> typedVisitor = visitor as IRFilterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EatContext eat() {
		EatContext _localctx = new EatContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_eat);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 22;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 20; _localctx._NL = Match(NL);
					((IWritableToken)_localctx._NL).Channel = TokenConstants.HiddenChannel;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 24;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElemContext : ParserRuleContext {
		public OpContext op() {
			return GetRuleContext<OpContext>(0);
		}
		public EatContext[] eat() {
			return GetRuleContexts<EatContext>();
		}
		public EatContext eat(int i) {
			return GetRuleContext<EatContext>(i);
		}
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public ElemContext[] elem() {
			return GetRuleContexts<ElemContext>();
		}
		public ElemContext elem(int i) {
			return GetRuleContext<ElemContext>(i);
		}
		public ITerminalNode[] NL() { return GetTokens(RFilter.NL); }
		public ITerminalNode NL(int i) {
			return GetToken(RFilter.NL, i);
		}
		public ElemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRFilterListener typedListener = listener as IRFilterListener;
			if (typedListener != null) typedListener.EnterElem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRFilterListener typedListener = listener as IRFilterListener;
			if (typedListener != null) typedListener.ExitElem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRFilterVisitor<TResult> typedVisitor = visitor as IRFilterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElemContext elem() {
		ElemContext _localctx = new ElemContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_elem);
		int _la;
		try {
			State = 141;
			switch (_input.La(1)) {
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__40:
			case T__42:
			case T__43:
			case T__56:
			case USER_OP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 26; op();
				State = 28;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
				case 1:
					{
					State = 27; eat();
					}
					break;
				}
				}
				break;
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case HEX:
			case INT:
			case FLOAT:
			case COMPLEX:
			case STRING:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 30; atom();
				}
				break;
			case T__35:
				EnterOuterAlt(_localctx, 3);
				{
				State = 31; Match(T__35);
				State = 33;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
				case 1:
					{
					State = 32; eat();
					}
					break;
				}
				State = 40;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__32) | (1L << T__33) | (1L << T__35) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << HEX) | (1L << INT) | (1L << FLOAT) | (1L << COMPLEX) | (1L << STRING) | (1L << ID))) != 0) || _la==USER_OP || _la==NL) {
					{
					State = 38;
					switch (_input.La(1)) {
					case T__1:
					case T__3:
					case T__4:
					case T__5:
					case T__6:
					case T__7:
					case T__8:
					case T__9:
					case T__10:
					case T__11:
					case T__12:
					case T__13:
					case T__14:
					case T__15:
					case T__16:
					case T__17:
					case T__18:
					case T__19:
					case T__20:
					case T__21:
					case T__22:
					case T__23:
					case T__24:
					case T__25:
					case T__26:
					case T__27:
					case T__28:
					case T__29:
					case T__30:
					case T__32:
					case T__33:
					case T__35:
					case T__37:
					case T__38:
					case T__39:
					case T__40:
					case T__41:
					case T__42:
					case T__43:
					case T__44:
					case T__45:
					case T__46:
					case T__47:
					case T__48:
					case T__49:
					case T__50:
					case T__51:
					case T__52:
					case T__53:
					case T__54:
					case T__55:
					case T__56:
					case HEX:
					case INT:
					case FLOAT:
					case COMPLEX:
					case STRING:
					case ID:
					case USER_OP:
						{
						State = 35; elem();
						}
						break;
					case NL:
						{
						State = 36; Match(NL);
						}
						break;
					case T__0:
						{
						State = 37; Match(T__0);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 42;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 43; Match(T__36);
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 4);
				{
				State = 44; Match(T__33);
				State = 49;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__32) | (1L << T__33) | (1L << T__35) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << HEX) | (1L << INT) | (1L << FLOAT) | (1L << COMPLEX) | (1L << STRING) | (1L << ID))) != 0) || _la==USER_OP || _la==NL) {
					{
					State = 47;
					switch (_input.La(1)) {
					case T__1:
					case T__3:
					case T__4:
					case T__5:
					case T__6:
					case T__7:
					case T__8:
					case T__9:
					case T__10:
					case T__11:
					case T__12:
					case T__13:
					case T__14:
					case T__15:
					case T__16:
					case T__17:
					case T__18:
					case T__19:
					case T__20:
					case T__21:
					case T__22:
					case T__23:
					case T__24:
					case T__25:
					case T__26:
					case T__27:
					case T__28:
					case T__29:
					case T__30:
					case T__32:
					case T__33:
					case T__35:
					case T__37:
					case T__38:
					case T__39:
					case T__40:
					case T__41:
					case T__42:
					case T__43:
					case T__44:
					case T__45:
					case T__46:
					case T__47:
					case T__48:
					case T__49:
					case T__50:
					case T__51:
					case T__52:
					case T__53:
					case T__54:
					case T__55:
					case T__56:
					case HEX:
					case INT:
					case FLOAT:
					case COMPLEX:
					case STRING:
					case ID:
					case USER_OP:
						{
						State = 45; elem();
						}
						break;
					case NL:
						{
						State = 46; eat();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 51;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 52; Match(T__34);
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 5);
				{
				State = 53; Match(T__3);
				State = 58;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__32) | (1L << T__33) | (1L << T__35) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << HEX) | (1L << INT) | (1L << FLOAT) | (1L << COMPLEX) | (1L << STRING) | (1L << ID))) != 0) || _la==USER_OP || _la==NL) {
					{
					State = 56;
					switch (_input.La(1)) {
					case T__1:
					case T__3:
					case T__4:
					case T__5:
					case T__6:
					case T__7:
					case T__8:
					case T__9:
					case T__10:
					case T__11:
					case T__12:
					case T__13:
					case T__14:
					case T__15:
					case T__16:
					case T__17:
					case T__18:
					case T__19:
					case T__20:
					case T__21:
					case T__22:
					case T__23:
					case T__24:
					case T__25:
					case T__26:
					case T__27:
					case T__28:
					case T__29:
					case T__30:
					case T__32:
					case T__33:
					case T__35:
					case T__37:
					case T__38:
					case T__39:
					case T__40:
					case T__41:
					case T__42:
					case T__43:
					case T__44:
					case T__45:
					case T__46:
					case T__47:
					case T__48:
					case T__49:
					case T__50:
					case T__51:
					case T__52:
					case T__53:
					case T__54:
					case T__55:
					case T__56:
					case HEX:
					case INT:
					case FLOAT:
					case COMPLEX:
					case STRING:
					case ID:
					case USER_OP:
						{
						State = 54; elem();
						}
						break;
					case NL:
						{
						State = 55; eat();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 60;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 61; Match(T__2);
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 6);
				{
				State = 62; Match(T__1);
				State = 67;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__32) | (1L << T__33) | (1L << T__35) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << HEX) | (1L << INT) | (1L << FLOAT) | (1L << COMPLEX) | (1L << STRING) | (1L << ID))) != 0) || _la==USER_OP || _la==NL) {
					{
					State = 65;
					switch (_input.La(1)) {
					case T__1:
					case T__3:
					case T__4:
					case T__5:
					case T__6:
					case T__7:
					case T__8:
					case T__9:
					case T__10:
					case T__11:
					case T__12:
					case T__13:
					case T__14:
					case T__15:
					case T__16:
					case T__17:
					case T__18:
					case T__19:
					case T__20:
					case T__21:
					case T__22:
					case T__23:
					case T__24:
					case T__25:
					case T__26:
					case T__27:
					case T__28:
					case T__29:
					case T__30:
					case T__32:
					case T__33:
					case T__35:
					case T__37:
					case T__38:
					case T__39:
					case T__40:
					case T__41:
					case T__42:
					case T__43:
					case T__44:
					case T__45:
					case T__46:
					case T__47:
					case T__48:
					case T__49:
					case T__50:
					case T__51:
					case T__52:
					case T__53:
					case T__54:
					case T__55:
					case T__56:
					case HEX:
					case INT:
					case FLOAT:
					case COMPLEX:
					case STRING:
					case ID:
					case USER_OP:
						{
						State = 63; elem();
						}
						break;
					case NL:
						{
						State = 64; eat();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 69;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 70; Match(T__2);
				State = 71; Match(T__2);
				}
				break;
			case T__32:
				EnterOuterAlt(_localctx, 7);
				{
				State = 72; Match(T__32);
				State = 74;
				_la = _input.La(1);
				if (_la==NL) {
					{
					State = 73; eat();
					}
				}

				State = 76; Match(T__33);
				State = 81;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__32) | (1L << T__33) | (1L << T__35) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << HEX) | (1L << INT) | (1L << FLOAT) | (1L << COMPLEX) | (1L << STRING) | (1L << ID))) != 0) || _la==USER_OP || _la==NL) {
					{
					State = 79;
					switch (_input.La(1)) {
					case T__1:
					case T__3:
					case T__4:
					case T__5:
					case T__6:
					case T__7:
					case T__8:
					case T__9:
					case T__10:
					case T__11:
					case T__12:
					case T__13:
					case T__14:
					case T__15:
					case T__16:
					case T__17:
					case T__18:
					case T__19:
					case T__20:
					case T__21:
					case T__22:
					case T__23:
					case T__24:
					case T__25:
					case T__26:
					case T__27:
					case T__28:
					case T__29:
					case T__30:
					case T__32:
					case T__33:
					case T__35:
					case T__37:
					case T__38:
					case T__39:
					case T__40:
					case T__41:
					case T__42:
					case T__43:
					case T__44:
					case T__45:
					case T__46:
					case T__47:
					case T__48:
					case T__49:
					case T__50:
					case T__51:
					case T__52:
					case T__53:
					case T__54:
					case T__55:
					case T__56:
					case HEX:
					case INT:
					case FLOAT:
					case COMPLEX:
					case STRING:
					case ID:
					case USER_OP:
						{
						State = 77; elem();
						}
						break;
					case NL:
						{
						State = 78; eat();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 83;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 84; Match(T__34);
				State = 86;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
				case 1:
					{
					State = 85; eat();
					}
					break;
				}
				}
				break;
			case T__39:
				EnterOuterAlt(_localctx, 8);
				{
				State = 88; Match(T__39);
				State = 90;
				_la = _input.La(1);
				if (_la==NL) {
					{
					State = 89; eat();
					}
				}

				State = 92; Match(T__33);
				State = 97;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__32) | (1L << T__33) | (1L << T__35) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << HEX) | (1L << INT) | (1L << FLOAT) | (1L << COMPLEX) | (1L << STRING) | (1L << ID))) != 0) || _la==USER_OP || _la==NL) {
					{
					State = 95;
					switch (_input.La(1)) {
					case T__1:
					case T__3:
					case T__4:
					case T__5:
					case T__6:
					case T__7:
					case T__8:
					case T__9:
					case T__10:
					case T__11:
					case T__12:
					case T__13:
					case T__14:
					case T__15:
					case T__16:
					case T__17:
					case T__18:
					case T__19:
					case T__20:
					case T__21:
					case T__22:
					case T__23:
					case T__24:
					case T__25:
					case T__26:
					case T__27:
					case T__28:
					case T__29:
					case T__30:
					case T__32:
					case T__33:
					case T__35:
					case T__37:
					case T__38:
					case T__39:
					case T__40:
					case T__41:
					case T__42:
					case T__43:
					case T__44:
					case T__45:
					case T__46:
					case T__47:
					case T__48:
					case T__49:
					case T__50:
					case T__51:
					case T__52:
					case T__53:
					case T__54:
					case T__55:
					case T__56:
					case HEX:
					case INT:
					case FLOAT:
					case COMPLEX:
					case STRING:
					case ID:
					case USER_OP:
						{
						State = 93; elem();
						}
						break;
					case NL:
						{
						State = 94; eat();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 99;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 100; Match(T__34);
				State = 102;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
				case 1:
					{
					State = 101; eat();
					}
					break;
				}
				}
				break;
			case T__41:
				EnterOuterAlt(_localctx, 9);
				{
				State = 104; Match(T__41);
				State = 106;
				_la = _input.La(1);
				if (_la==NL) {
					{
					State = 105; eat();
					}
				}

				State = 108; Match(T__33);
				State = 113;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__32) | (1L << T__33) | (1L << T__35) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << HEX) | (1L << INT) | (1L << FLOAT) | (1L << COMPLEX) | (1L << STRING) | (1L << ID))) != 0) || _la==USER_OP || _la==NL) {
					{
					State = 111;
					switch (_input.La(1)) {
					case T__1:
					case T__3:
					case T__4:
					case T__5:
					case T__6:
					case T__7:
					case T__8:
					case T__9:
					case T__10:
					case T__11:
					case T__12:
					case T__13:
					case T__14:
					case T__15:
					case T__16:
					case T__17:
					case T__18:
					case T__19:
					case T__20:
					case T__21:
					case T__22:
					case T__23:
					case T__24:
					case T__25:
					case T__26:
					case T__27:
					case T__28:
					case T__29:
					case T__30:
					case T__32:
					case T__33:
					case T__35:
					case T__37:
					case T__38:
					case T__39:
					case T__40:
					case T__41:
					case T__42:
					case T__43:
					case T__44:
					case T__45:
					case T__46:
					case T__47:
					case T__48:
					case T__49:
					case T__50:
					case T__51:
					case T__52:
					case T__53:
					case T__54:
					case T__55:
					case T__56:
					case HEX:
					case INT:
					case FLOAT:
					case COMPLEX:
					case STRING:
					case ID:
					case USER_OP:
						{
						State = 109; elem();
						}
						break;
					case NL:
						{
						State = 110; eat();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 115;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 116; Match(T__34);
				State = 118;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
				case 1:
					{
					State = 117; eat();
					}
					break;
				}
				}
				break;
			case T__37:
				EnterOuterAlt(_localctx, 10);
				{
				State = 120; Match(T__37);
				State = 122;
				_la = _input.La(1);
				if (_la==NL) {
					{
					State = 121; eat();
					}
				}

				State = 124; Match(T__33);
				State = 129;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__32) | (1L << T__33) | (1L << T__35) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << HEX) | (1L << INT) | (1L << FLOAT) | (1L << COMPLEX) | (1L << STRING) | (1L << ID))) != 0) || _la==USER_OP || _la==NL) {
					{
					State = 127;
					switch (_input.La(1)) {
					case T__1:
					case T__3:
					case T__4:
					case T__5:
					case T__6:
					case T__7:
					case T__8:
					case T__9:
					case T__10:
					case T__11:
					case T__12:
					case T__13:
					case T__14:
					case T__15:
					case T__16:
					case T__17:
					case T__18:
					case T__19:
					case T__20:
					case T__21:
					case T__22:
					case T__23:
					case T__24:
					case T__25:
					case T__26:
					case T__27:
					case T__28:
					case T__29:
					case T__30:
					case T__32:
					case T__33:
					case T__35:
					case T__37:
					case T__38:
					case T__39:
					case T__40:
					case T__41:
					case T__42:
					case T__43:
					case T__44:
					case T__45:
					case T__46:
					case T__47:
					case T__48:
					case T__49:
					case T__50:
					case T__51:
					case T__52:
					case T__53:
					case T__54:
					case T__55:
					case T__56:
					case HEX:
					case INT:
					case FLOAT:
					case COMPLEX:
					case STRING:
					case ID:
					case USER_OP:
						{
						State = 125; elem();
						}
						break;
					case NL:
						{
						State = 126; eat();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 131;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 132; Match(T__34);
				State = 134;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
				case 1:
					{
					State = 133; eat();
					}
					break;
				}
				}
				break;
			case T__38:
				EnterOuterAlt(_localctx, 11);
				{
				State = 136; Match(T__38);
				State = 138;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
				case 1:
					{
					State = 137; eat();
					}
					break;
				}


						/* 10.4.5 Flow control elements (from R-lang manual)
						R contains the following control structures as special syntactic constructs
						if ( cond ) expr
						if ( cond ) expr1 else expr2
						-> The expressions in these constructs will typically be compound expressions. 	
						*/	

						/*
						And the "input" attribute from the abstract class Parser (which your 
						generated parser extends from) now has an underscore ("_input") in front of it.
						Lt(-2) : Predicates minus 2 positions/tokens from current.
						*/

				        IWritableToken tok = (IWritableToken) _input.Lt(-2); 
				        if ( ((IToken)tok).Type.Equals(NL))	// (if (_input.Lt(-2) == NL) ) 
							tok.Channel= TokenConstants.HiddenChannel; 
							// I set the token's Channel from Default to HiddenChannel.
							// Anything on different channel than DEFAULT_CHANNEL is not parsed by parser.
				        
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(RFilter.ID, 0); }
		public ITerminalNode STRING() { return GetToken(RFilter.STRING, 0); }
		public ITerminalNode HEX() { return GetToken(RFilter.HEX, 0); }
		public ITerminalNode INT() { return GetToken(RFilter.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(RFilter.FLOAT, 0); }
		public ITerminalNode COMPLEX() { return GetToken(RFilter.COMPLEX, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRFilterListener typedListener = listener as IRFilterListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRFilterListener typedListener = listener as IRFilterListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRFilterVisitor<TResult> typedVisitor = visitor as IRFilterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_atom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << HEX) | (1L << INT) | (1L << FLOAT) | (1L << COMPLEX) | (1L << STRING) | (1L << ID))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpContext : ParserRuleContext {
		public ITerminalNode USER_OP() { return GetToken(RFilter.USER_OP, 0); }
		public OpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRFilterListener typedListener = listener as IRFilterListener;
			if (typedListener != null) typedListener.EnterOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRFilterListener typedListener = listener as IRFilterListener;
			if (typedListener != null) typedListener.ExitOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRFilterVisitor<TResult> typedVisitor = visitor as IRFilterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpContext op() {
		OpContext _localctx = new OpContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			_la = _input.La(1);
			if ( !(((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & ((1L << (T__4 - 5)) | (1L << (T__5 - 5)) | (1L << (T__6 - 5)) | (1L << (T__7 - 5)) | (1L << (T__8 - 5)) | (1L << (T__9 - 5)) | (1L << (T__10 - 5)) | (1L << (T__11 - 5)) | (1L << (T__12 - 5)) | (1L << (T__13 - 5)) | (1L << (T__14 - 5)) | (1L << (T__15 - 5)) | (1L << (T__16 - 5)) | (1L << (T__17 - 5)) | (1L << (T__18 - 5)) | (1L << (T__19 - 5)) | (1L << (T__20 - 5)) | (1L << (T__21 - 5)) | (1L << (T__22 - 5)) | (1L << (T__23 - 5)) | (1L << (T__24 - 5)) | (1L << (T__25 - 5)) | (1L << (T__26 - 5)) | (1L << (T__27 - 5)) | (1L << (T__28 - 5)) | (1L << (T__29 - 5)) | (1L << (T__30 - 5)) | (1L << (T__40 - 5)) | (1L << (T__42 - 5)) | (1L << (T__43 - 5)) | (1L << (T__56 - 5)) | (1L << (USER_OP - 5)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x45\x96\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x3\x2\x3\x2\x3\x2\a\x2"+
		"\x10\n\x2\f\x2\xE\x2\x13\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x6\x3\x19\n\x3\r"+
		"\x3\xE\x3\x1A\x3\x4\x3\x4\x5\x4\x1F\n\x4\x3\x4\x3\x4\x3\x4\x5\x4$\n\x4"+
		"\x3\x4\x3\x4\x3\x4\a\x4)\n\x4\f\x4\xE\x4,\v\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\a\x4\x32\n\x4\f\x4\xE\x4\x35\v\x4\x3\x4\x3\x4\x3\x4\x3\x4\a\x4;\n\x4"+
		"\f\x4\xE\x4>\v\x4\x3\x4\x3\x4\x3\x4\x3\x4\a\x4\x44\n\x4\f\x4\xE\x4G\v"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4M\n\x4\x3\x4\x3\x4\x3\x4\a\x4R\n\x4\f"+
		"\x4\xE\x4U\v\x4\x3\x4\x3\x4\x5\x4Y\n\x4\x3\x4\x3\x4\x5\x4]\n\x4\x3\x4"+
		"\x3\x4\x3\x4\a\x4\x62\n\x4\f\x4\xE\x4\x65\v\x4\x3\x4\x3\x4\x5\x4i\n\x4"+
		"\x3\x4\x3\x4\x5\x4m\n\x4\x3\x4\x3\x4\x3\x4\a\x4r\n\x4\f\x4\xE\x4u\v\x4"+
		"\x3\x4\x3\x4\x5\x4y\n\x4\x3\x4\x3\x4\x5\x4}\n\x4\x3\x4\x3\x4\x3\x4\a\x4"+
		"\x82\n\x4\f\x4\xE\x4\x85\v\x4\x3\x4\x3\x4\x5\x4\x89\n\x4\x3\x4\x3\x4\x5"+
		"\x4\x8D\n\x4\x3\x4\x5\x4\x90\n\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x2\x2"+
		"\x2\a\x2\x2\x4\x2\x6\x2\b\x2\n\x2\x2\x4\x4\x2/:<\x41\a\x2\a!++-.;;\x42"+
		"\x42\xBA\x2\x11\x3\x2\x2\x2\x4\x18\x3\x2\x2\x2\x6\x8F\x3\x2\x2\x2\b\x91"+
		"\x3\x2\x2\x2\n\x93\x3\x2\x2\x2\f\x10\x5\x6\x4\x2\r\x10\a\x44\x2\x2\xE"+
		"\x10\a\x3\x2\x2\xF\f\x3\x2\x2\x2\xF\r\x3\x2\x2\x2\xF\xE\x3\x2\x2\x2\x10"+
		"\x13\x3\x2\x2\x2\x11\xF\x3\x2\x2\x2\x11\x12\x3\x2\x2\x2\x12\x14\x3\x2"+
		"\x2\x2\x13\x11\x3\x2\x2\x2\x14\x15\a\x2\x2\x3\x15\x3\x3\x2\x2\x2\x16\x17"+
		"\a\x44\x2\x2\x17\x19\b\x3\x1\x2\x18\x16\x3\x2\x2\x2\x19\x1A\x3\x2\x2\x2"+
		"\x1A\x18\x3\x2\x2\x2\x1A\x1B\x3\x2\x2\x2\x1B\x5\x3\x2\x2\x2\x1C\x1E\x5"+
		"\n\x6\x2\x1D\x1F\x5\x4\x3\x2\x1E\x1D\x3\x2\x2\x2\x1E\x1F\x3\x2\x2\x2\x1F"+
		"\x90\x3\x2\x2\x2 \x90\x5\b\x5\x2!#\a&\x2\x2\"$\x5\x4\x3\x2#\"\x3\x2\x2"+
		"\x2#$\x3\x2\x2\x2$*\x3\x2\x2\x2%)\x5\x6\x4\x2&)\a\x44\x2\x2\')\a\x3\x2"+
		"\x2(%\x3\x2\x2\x2(&\x3\x2\x2\x2(\'\x3\x2\x2\x2),\x3\x2\x2\x2*(\x3\x2\x2"+
		"\x2*+\x3\x2\x2\x2+-\x3\x2\x2\x2,*\x3\x2\x2\x2-\x90\a\'\x2\x2.\x33\a$\x2"+
		"\x2/\x32\x5\x6\x4\x2\x30\x32\x5\x4\x3\x2\x31/\x3\x2\x2\x2\x31\x30\x3\x2"+
		"\x2\x2\x32\x35\x3\x2\x2\x2\x33\x31\x3\x2\x2\x2\x33\x34\x3\x2\x2\x2\x34"+
		"\x36\x3\x2\x2\x2\x35\x33\x3\x2\x2\x2\x36\x90\a%\x2\x2\x37<\a\x6\x2\x2"+
		"\x38;\x5\x6\x4\x2\x39;\x5\x4\x3\x2:\x38\x3\x2\x2\x2:\x39\x3\x2\x2\x2;"+
		">\x3\x2\x2\x2<:\x3\x2\x2\x2<=\x3\x2\x2\x2=?\x3\x2\x2\x2><\x3\x2\x2\x2"+
		"?\x90\a\x5\x2\x2@\x45\a\x4\x2\x2\x41\x44\x5\x6\x4\x2\x42\x44\x5\x4\x3"+
		"\x2\x43\x41\x3\x2\x2\x2\x43\x42\x3\x2\x2\x2\x44G\x3\x2\x2\x2\x45\x43\x3"+
		"\x2\x2\x2\x45\x46\x3\x2\x2\x2\x46H\x3\x2\x2\x2G\x45\x3\x2\x2\x2HI\a\x5"+
		"\x2\x2I\x90\a\x5\x2\x2JL\a#\x2\x2KM\x5\x4\x3\x2LK\x3\x2\x2\x2LM\x3\x2"+
		"\x2\x2MN\x3\x2\x2\x2NS\a$\x2\x2OR\x5\x6\x4\x2PR\x5\x4\x3\x2QO\x3\x2\x2"+
		"\x2QP\x3\x2\x2\x2RU\x3\x2\x2\x2SQ\x3\x2\x2\x2ST\x3\x2\x2\x2TV\x3\x2\x2"+
		"\x2US\x3\x2\x2\x2VX\a%\x2\x2WY\x5\x4\x3\x2XW\x3\x2\x2\x2XY\x3\x2\x2\x2"+
		"Y\x90\x3\x2\x2\x2Z\\\a*\x2\x2[]\x5\x4\x3\x2\\[\x3\x2\x2\x2\\]\x3\x2\x2"+
		"\x2]^\x3\x2\x2\x2^\x63\a$\x2\x2_\x62\x5\x6\x4\x2`\x62\x5\x4\x3\x2\x61"+
		"_\x3\x2\x2\x2\x61`\x3\x2\x2\x2\x62\x65\x3\x2\x2\x2\x63\x61\x3\x2\x2\x2"+
		"\x63\x64\x3\x2\x2\x2\x64\x66\x3\x2\x2\x2\x65\x63\x3\x2\x2\x2\x66h\a%\x2"+
		"\x2gi\x5\x4\x3\x2hg\x3\x2\x2\x2hi\x3\x2\x2\x2i\x90\x3\x2\x2\x2jl\a,\x2"+
		"\x2km\x5\x4\x3\x2lk\x3\x2\x2\x2lm\x3\x2\x2\x2mn\x3\x2\x2\x2ns\a$\x2\x2"+
		"or\x5\x6\x4\x2pr\x5\x4\x3\x2qo\x3\x2\x2\x2qp\x3\x2\x2\x2ru\x3\x2\x2\x2"+
		"sq\x3\x2\x2\x2st\x3\x2\x2\x2tv\x3\x2\x2\x2us\x3\x2\x2\x2vx\a%\x2\x2wy"+
		"\x5\x4\x3\x2xw\x3\x2\x2\x2xy\x3\x2\x2\x2y\x90\x3\x2\x2\x2z|\a(\x2\x2{"+
		"}\x5\x4\x3\x2|{\x3\x2\x2\x2|}\x3\x2\x2\x2}~\x3\x2\x2\x2~\x83\a$\x2\x2"+
		"\x7F\x82\x5\x6\x4\x2\x80\x82\x5\x4\x3\x2\x81\x7F\x3\x2\x2\x2\x81\x80\x3"+
		"\x2\x2\x2\x82\x85\x3\x2\x2\x2\x83\x81\x3\x2\x2\x2\x83\x84\x3\x2\x2\x2"+
		"\x84\x86\x3\x2\x2\x2\x85\x83\x3\x2\x2\x2\x86\x88\a%\x2\x2\x87\x89\x5\x4"+
		"\x3\x2\x88\x87\x3\x2\x2\x2\x88\x89\x3\x2\x2\x2\x89\x90\x3\x2\x2\x2\x8A"+
		"\x8C\a)\x2\x2\x8B\x8D\x5\x4\x3\x2\x8C\x8B\x3\x2\x2\x2\x8C\x8D\x3\x2\x2"+
		"\x2\x8D\x8E\x3\x2\x2\x2\x8E\x90\b\x4\x1\x2\x8F\x1C\x3\x2\x2\x2\x8F \x3"+
		"\x2\x2\x2\x8F!\x3\x2\x2\x2\x8F.\x3\x2\x2\x2\x8F\x37\x3\x2\x2\x2\x8F@\x3"+
		"\x2\x2\x2\x8FJ\x3\x2\x2\x2\x8FZ\x3\x2\x2\x2\x8Fj\x3\x2\x2\x2\x8Fz\x3\x2"+
		"\x2\x2\x8F\x8A\x3\x2\x2\x2\x90\a\x3\x2\x2\x2\x91\x92\t\x2\x2\x2\x92\t"+
		"\x3\x2\x2\x2\x93\x94\t\x3\x2\x2\x94\v\x3\x2\x2\x2!\xF\x11\x1A\x1E#(*\x31"+
		"\x33:<\x43\x45LQSX\\\x61\x63hlqsx|\x81\x83\x88\x8C\x8F";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace RGrammarParser
